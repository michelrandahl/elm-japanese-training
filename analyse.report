[H[2JStarting downloads...

  ● elm/random 1.0.0
  ● elm/html 1.0.0
  ● elm/time 1.0.0
  ● elm/virtual-dom 1.0.2
  ● elm/http 2.0.0
  ● elm/url 1.0.0
  ● elm/bytes 1.0.8
  ● elm/json 1.1.3
  ● elm/file 1.0.5
  ● owanturist/elm-union-find 1.0.0
  ● elm-community/random-extra 3.1.0
  ● NoRedInk/elm-json-decode-pipeline 1.0.0
  ● avh4/elm-color 1.0.0
  ● elm/core 1.0.5
  ● elm/browser 1.0.2

Verifying dependencies (0/15)Verifying dependencies (1/15)Verifying dependencies (2/15)Verifying dependencies (3/15)Verifying dependencies (4/15)Verifying dependencies (5/15)Verifying dependencies (6/15)Verifying dependencies (7/15)Verifying dependencies (8/15)Verifying dependencies (9/15)Verifying dependencies (10/15)Verifying dependencies (11/15)Verifying dependencies (12/15)Verifying dependencies (13/15)Verifying dependencies (14/15)Verifying dependencies (15/15)                              Dependencies ready!
Compiling ...Compiling (1)Compiling (2)Compiling (3)-- MISSING PATTERNS ----------------------------------------------- src/Quiz.elm

This `case` does not have branches for all possibilities:

252|>    case msg of
253|>        OpenModal ->
254|>            ( model, enableModal "hello foobar from elm" )
255|>
256|>        GeneratedQuiz (LazyNext ( quiz, makeGenerator )) ->
257|>            ( { model
258|>                | quiz = Just quiz
259|>                , quizGenerator = makeGenerator ()
260|>                , score = 0
261|>              }
262|>            , Cmd.none
263|>            )
264|>
265|>        GeneratedQuiz Nil ->
266|>            ( { model
267|>                | errorMessage = Just "failed to generate quiz"
268|>                , questionsLeft = 0
269|>                , totalNumberOfQuestions = 0
270|>              }
271|>            , Cmd.none
272|>            )
273|>
274|>        NextQuestion (LazyNext ( quiz, makeGenerator )) ->
275|>            ( { model | quiz = Just quiz, quizGenerator = makeGenerator () }
276|>            , Cmd.none
277|>            )
278|>
279|>        NextQuestion Nil ->
280|>            ( model, Cmd.none )
281|>
282|>        GenNextQuestion ->
283|>            ( { model
284|>                | quizFeedback = Nothing
285|>                , quiz = Nothing
286|>              }
287|>            , model.quizGenerator |> Random.generate NextQuestion
288|>            )
289|>
290|>        SelectedQuizOption selectedQuizOption ->
291|>            model.quiz
292|>                |> Maybe.map
293|>                    (\quiz ->
294|>                        let
295|>                            success : Bool
296|>                            success =
297|>                                quiz.answer == selectedQuizOption
298|>
299|>                            wrong : Maybe String
300|>                            wrong =
301|>                                if success then
302|>                                    Nothing
303|>
304|>                                else
305|>                                    Just selectedQuizOption
306|>
307|>                            score =
308|>                                if success then
309|>                                    model.score + 1
310|>
311|>                                else
312|>                                    model.score - 1
313|>                        in
314|>                        ( { model
315|>                            | quizFeedback =
316|>                                Just
317|>                                    { success = success
318|>                                    , correct = quiz.answer
319|>                                    , wrong = wrong
320|>                                    }
321|>                            , score = score
322|>                            , questionsLeft = model.questionsLeft - 1
323|>                          }
324|>                        , Cmd.none
325|>                        )
326|>                    )
327|>                |> Maybe.withDefault ( model, Cmd.none )
328|>
329|>        InitializeQuiz ->
330|>            model.coreData
331|>                |> Maybe.map
332|>                    (\{ katakanaToRomaji, romajiToKatakana } ->
333|>                        let
334|>                            numberOfQuestions : Int
335|>                            numberOfQuestions =
336|>                                5
337|>
338|>                            translators : Translators
339|>                            translators =
340|>                                { katakanaToRomaji = katakanaToRomaji
341|>                                , romajiToKatakana = romajiToKatakana
342|>                                }
343|>
344|>                            characterPools : CharacterPools
345|>                            characterPools =
346|>                                { japaneseCharacterPool = Dict.keys katakanaToRomaji
347|>                                , romajiCharacterPool = Dict.keys romajiToKatakana
348|>                                }
349|>
350|>                            gen : Generator (LazyGenerator QuizQuestion)
351|>                            gen =
352|>                                generateQuizList translators 4 5 characterPools
353|>                        in
354|>                        ( { model
355|>                            | questionsLeft = numberOfQuestions
356|>                            , totalNumberOfQuestions = numberOfQuestions
357|>                          }
358|>                        , Random.generate GeneratedQuiz gen
359|>                        )
360|>                    )
361|>                |> Maybe.withDefault ( model, Cmd.none )
362|>
363|>        GotKatakanaJson (Ok json) ->
364|>            ( let
365|>                flatKatakana =
366|>                    flatCharsList json
367|>              in
368|>              { model
369|>                | coreData =
370|>                    Just
371|>                        { katakanaJson = json
372|>                        , flatKatakana = flatKatakana
373|>                        , katakanaToRomaji =
374|>                            flatKatakana
375|>                                |> List.map (\{ character, pronunciation } -> ( character, pronunciation ))
376|>                                |> Dict.fromList
377|>                        , romajiToKatakana =
378|>                            flatKatakana
379|>                                |> List.map (\{ character, pronunciation } -> ( pronunciation, character ))
380|>                                |> Dict.fromList
381|>                        }
382|>              }
383|>            , Cmd.none
384|>            )
385|>
386|>        GotKatakanaJson (Err _) ->
387|>            ( { model | errorMessage = Just "Failed to fetch katakana json" }, Cmd.none )

Missing possibilities include:

    Stuff

I would have to crash if I saw one of those. Add branches for them!

Hint: If you want to write the code for each branch later, use `Debug.todo` as a
placeholder. Read <https://elm-lang.org/0.19.1/missing-patterns> for more
guidance on this workflow.

Detected problems in 1 module.
[H[2JCompiling ...Compiling (1)Success! Compiled 1 module.

    Quiz ───> app.js

Fetching package information from package.elm-lang.org.
Fetched dependencies
INFO: Started...
INFO: No configuration provided. Using default configuration.
INFO: Load dependency elm-community/random-extra 3.1.0
INFO: Load dependency elm/random 1.0.0
INFO: Load dependency elm/json 1.1.3
INFO: Load dependency elm/http 2.0.0
INFO: Load dependency elm/html 1.0.0
INFO: Load dependency elm/core 1.0.5
INFO: Load dependency elm/browser 1.0.2
INFO: Load dependency NoRedInk/elm-json-decode-pipeline 1.0.0
INFO: Loaded NoRedInk/elm-json-decode-pipeline from package.elm-lang.org
INFO: Loaded elm/json from package.elm-lang.org
INFO: Loaded elm/http from package.elm-lang.org
INFO: Loaded elm/browser from package.elm-lang.org
INFO: Loaded elm-community/random-extra from package.elm-lang.org
INFO: Loaded elm/random from package.elm-lang.org
INFO: Loaded elm/html from package.elm-lang.org
INFO: Loaded elm/core from package.elm-lang.org
INFO: Load file src/DecodeJapaneseCharsJson.elm...
INFO: Load file src/Quiz.elm...
INFO: Load file src/QuizGeneration.elm...
INFO: Load file src/RandomSample.elm...
Found 2 message(s)

Messages:
- src/DecodeJapaneseCharsJson.elm
  > Unused imported variable `at` at ((3,49),(3,51))
- src/Quiz.elm
  > Unused top level definition `viewCharOverviewModal` at ((171,1),(171,22))
